<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="insaManage">


	<select id="seq" resultType="Long">
		SELECT emp_history_seq.NEXTVAL FROM dual
	</select>
	
	
	<insert id="insertEmp" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_reg(emp_name, emp_rrn, emp_email, emp_tel, 
				emp_join_date, emp_save_filename, emp_original_filename, emp_zip, emp_addr1, emp_addr2)
		VALUES (#{emp_name}, #{emp_rrn}, #{emp_email}, 
				#{emp_tel}, 
				TO_DATE(#{emp_join_date}, 'YYYY-MM-DD'), #{emp_save_filename, jdbcType=VARCHAR},
				#{emp_original_filename, jdbcType=VARCHAR},
				#{emp_zip, jdbcType=VARCHAR}, #{emp_addr1, jdbcType=VARCHAR}, #{emp_addr2, jdbcType=VARCHAR})
	</insert>
	
	<insert id="insertHistory" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_history(history_no, emp_no, pos_no, pos_startdate, dept_no, dept_startdate)
		VALUES (#{history_no}, 
		(SELECT emp_no FROM emp ORDER BY substr(emp_no,5,4) DESC FETCH FIRST 1 ROW ONLY), 
		#{pos_no}, TO_DATE(#{pos_startdate}, 'YYYY-MM-DD'), #{dept_no}, 
		TO_DATE(#{dept_startdate}, 'YYYY-MM-DD'))
	</insert>
	
	
	
	
	<!-- 상위 부서 카테고리 -->
	<!-- 하위 부서 카테고리 -->
	<!-- 
	<select id="listDeptCategory" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT dept_no, dept_name, dept_status, top_dept_no 
		FROM dept 
		WHERE top_dept_no IS NULL 
		ORDER BY dept_no 
	</select>

	<select id="listDeptSubCategory" parameterType="Long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT dept_no, dept_name, dept_status, top_dept_no 
		FROM dept
		WHERE top_dept_no  = #{top_dept_no}
		ORDER BY dept_no
	</select>
	 -->
	 
	<select id="readDeptCategory" parameterType="Long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT  dept_no, dept_name, dept_status, top_dept_no 
		FROM dept
		WHERE dept_no = #{dept_no}
	</select>
	 
	 <select id="listDeptCategory" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT dept_no, dept_name, top_dept_no
		FROM dept
		ORDER BY dept_no
	</select>
	 
	<!-- 직위 -->	
	<select id="readPosCategory" parameterType="Long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT pos_no, pos_name, top_pos_no
		FROM pos
		WHERE pos_no = #{pos_no}
	</select>
	
	<select id="listPosCategory" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT pos_no, pos_name, top_pos_no
		FROM pos
		ORDER BY pos_no
	</select>
	
	<!-- 회원 리스트 -->
	<sql id="where-list">
		<choose>		
			<when test="condition == 'all'">
				( INSTR(emp_no, #{keyword}) &gt; 0
					OR INSTR(emp_name, #{keyword}) &gt; 0
					OR INSTR(dept_name, #{keyword}) &gt; 0
					OR INSTR(pos_name, #{keyword}) &gt; 0 )
			</when>
			<when test="condition == 'emp_no'">
				INSTR(emp_no, #{keyword}) &gt; 0
			</when>
			<when test="condition == 'emp_name'">
				INSTR(emp_name, #{keyword}) &gt; 0
			</when>
			<when test="condition == 'dept_name' ">
				INSTR(dept_name, #{keyword}) &gt; 0
			</when>
			<when test="condition == 'pos_name' ">
				INSTR(pos_name, #{keyword}) &gt; 0
			</when>
		</choose>
	</sql>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		FROM emp 
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			<if test="emp_status != 3">
				AND emp_status = #{emp_status}
			</if>
		</where>
	</select>
	

	<!-- 재직 중인 사원 리스트 -->
	<!-- 
	<select id="listinsaMember" parameterType="map" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT e.emp_no, e.emp_name, d.dept_name, p.pos_name,
				TO_CHAR(e.emp_join_date, 'YYYY-MM-DD') emp_join_date,
				TO_CHAR(e.emp_resign_date, 'YYYY-MM-DD') emp_resign_date
		FROM emp e
		JOIN emp_history eh ON e.emp_no = eh.emp_no
		JOIN dept d ON eh.dept_no = d.dept_no
		JOIN pos p ON eh.pos_no = p.pos_no
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
			AND e.emp_status = 0
		</where>
		ORDER BY emp_join_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	-->
	<select id="listinsaMember" parameterType="map" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT emp_no, emp_name, dept_name, pos_name, emp_join_date, emp_resign_date, emp_status
			FROM (
			  SELECT e.emp_no, e.emp_name, d.dept_name, p.pos_name, 
			         TO_CHAR(e.emp_join_date, 'YYYY-MM-DD') emp_join_date,
			         TO_CHAR(e.emp_resign_date, 'YYYY-MM-DD') emp_resign_date, e.emp_status,
			         ROW_NUMBER() OVER (PARTITION BY e.emp_no ORDER BY eh.pos_startdate DESC, eh.dept_startdate DESC) AS rank
			  FROM emp e
			  JOIN emp_history eh ON e.emp_no = eh.emp_no
			  JOIN dept d ON eh.dept_no = d.dept_no
			  JOIN pos p ON eh.pos_no = p.pos_no
			) t 
		<where>
			AND rank = 1
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
			<if test="emp_status != 3">
				AND emp_status = #{emp_status}
			</if>
		</where>
		ORDER BY emp_status, emp_join_date DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>


	
	<!-- 인사관리 -->
	<select id="readProfile" parameterType="long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT e.emp_no, e.emp_name, e.emp_email, e.emp_tel, 
				d.dept_name, p.pos_name,
				SUBSTR(emp_rrn, 1, 6) emp_rrn,
				TO_CHAR(e.emp_join_date, 'YYYY-MM-DD') emp_join_date, emp_save_filename, emp_original_filename, 
				emp_zip, emp_addr1, emp_addr2
		FROM emp e
		JOIN (
		    SELECT *
		    FROM emp_history
		    WHERE emp_no = #{emp_no}
		    ORDER BY dept_startdate DESC
		    FETCH FIRST 1 ROW ONLY
		) eh ON e.emp_no = eh.emp_no
		JOIN dept d ON eh.dept_no = d.dept_no
		JOIN pos p ON eh.pos_no = p.pos_no
		WHERE e.emp_no = #{emp_no}
	</select>
	
	<select id="readAnnualLeave" parameterType="long" resultType="Integer">
		SELECT TRUNC((MONTHS_BETWEEN(TRUNC(SYSDATE), TRUNC(e.emp_join_date)) / 12 ) + 1) AS annual_leave
		FROM emp e
		WHERE e.emp_no = #{emp_no}
	</select>
	
	<insert id="insertEmpHistory" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_history(history_no, emp_no, pos_no, pos_startdate, dept_no, dept_startdate)
		VALUES (#{history_no}, #{emp_no}, 
		#{pos_no}, TO_CHAR(#{pos_startdate}, 'YYYY-MM-DD'), #{dept_no}, 
		TO_CHAR(#{dept_startdate}, 'YYYY-MM-DD'))
	</insert>
	
	<update id="updateEmpStatus" parameterType="map">
		<choose>
			<when test="emp_status == 1">
				UPDATE emp SET emp_status = #{emp_status}, emp_resign_date = SYSDATE WHERE emp_no = #{emp_no}
			</when>
			<when test="emp_status == 0">
				UPDATE emp SET emp_status = #{emp_status}, emp_resign_date = NULL WHERE emp_no = #{emp_no}
			</when>
			<when test="emp_status == 2">
				UPDATE emp SET emp_status = #{emp_status}, emp_resign_date = SYSDATE WHERE emp_no = #{emp_no}
			</when>
		</choose>
	</update>
	
	<update id="updateEmpStatus2" parameterType="map">
		<choose>
			<when test="emp_status == 1">
				UPDATE emp SET emp_status = #{emp_status}, emp_resign_date = SYSDATE WHERE emp_no = #{emp_no}
			</when>
			<when test="emp_status == 0">
				UPDATE emp SET emp_status = #{emp_status}, emp_resign_date = NULL WHERE emp_no = #{emp_no}
			</when>
			<when test="emp_status == 2">
				UPDATE emp_history SET pos_enddate = SYSDATE, dept_enddate = SYSDATE WHERE emp_no = #{emp_no}
			</when>
		</choose>
	</update>
	
	
	
	
	
	<!-- 직위만 변경 -->
	<!-- 
	<update id="updatePos" parameterType="com.sp.grooveware.insamanage.InsaManage">
		UPDATE emp_history SET pos_enddate = #{pos_enddate} 
		WHERE emp_no = #{emp_no} AND pos_enddate IS NULL
	</update>
	
	<select id="selectDept" parameterType="Long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT  eh.dept_no, d.dept_name, eh.dept_startdate
		FROM emp_history eh
		JOIN dept d ON d.dept_no = eh.dept_no
        WHERE eh.emp_no = #{emp_no}
        ORDER BY dept_startdate DESC
        FETCH FIRST 1 ROW ONLY
	</select>
	
	<insert id="insertPos" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_history (history_no, emp_no, pos_no, pos_startdate, dept_no, dept_startdate)
		VALUES (#{history_no}, #{emp_no}, #{pos_no}, TO_DATE(#{pos_startdate}, 'YYYY-MM-DD')
			(SELECT dept_no FROM emp_history WHERE emp_no = #{emp_no} ORDER BY dept_startdate DESC FETCH FIRST 1 ROW ONLY),
			(SELECT dept_startdate FROM emp_history WHERE emp_no = #{emp_no} ORDER BY dept_startdate DESC FETCH FIRST 1 ROW ONLY))
	</insert>
	-->
	
	
	<!-- 부서만 변경 -->
	<!-- 
	<update id="updateDept" parameterType="com.sp.grooveware.insamanage.InsaManage">
		UPDATE emp_history SET dept_enddate = #{dept_enddate} 
		WHERE emp_no = #{emp_no} AND dept_enddate IS NULL
	</update>
	
	<select id="selectPos" parameterType="Long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT  eh.pos_no, p.pos_name, eh.pos_startdate
		FROM emp_history eh
		JOIN pos p ON p.pos_no = eh.pos_no
        WHERE eh.emp_no = #{emp_no}
        ORDER BY pos_startdate DESC
        FETCH FIRST 1 ROW ONLY
	</select>
	
	<insert id="insertDept" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_history (history_no, emp_no, pos_no, pos_startdate, dept_no, dept_startdate)
		VALUES (#{history_no}, #{emp_no}, 
			(SELECT pos_no FROM emp_history WHERE emp_no = #{emp_no} ORDER BY pos_startdate DESC FETCH FIRST 1 ROW ONLY),
			(SELECT pos_startdate FROM emp_history WHERE emp_no = #{emp_no} ORDER BY pos_startdate DESC FETCH FIRST 1 ROW ONLY),
			#{dept_no}, TO_DATE(#{dept_startdate}, 'YYYY-MM-DD'))
	</insert>
	 -->
	
	
	<!-- 직위/부서 모두 변경 -->
	<update id="updatePosDept" parameterType="com.sp.grooveware.insamanage.InsaManage">
		UPDATE emp_history SET pos_enddate = #{pos_enddate, jdbcType=DATE}, dept_enddate = #{dept_enddate, jdbcType=DATE} 
		WHERE emp_no = #{emp_no} AND pos_enddate IS NULL AND dept_enddate IS NULL
	</update>
	
	<select id="selectPosDept" parameterType="Long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT  eh.emp_no, eh.pos_no, p.pos_name, 
			TO_CHAR(eh.pos_startdate, 'YYYY-MM-DD') pos_startdate, 
			eh.dept_no,  d.dept_name, 
			TO_CHAR(eh.dept_startdate, 'YYYY-MM-DD') dept_startdate
		FROM emp_history eh
		JOIN pos p ON p.pos_no = eh.pos_no
		JOIN dept d ON d.dept_no = eh.dept_no
        WHERE eh.emp_no = #{emp_no}
        ORDER BY pos_startdate DESC, dept_startdate DESC
        FETCH FIRST 1 ROW ONLY
	</select>
	
	<insert id="insertPosDept" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_history (history_no, emp_no, pos_no, pos_startdate, dept_no, dept_startdate)
		VALUES (EMP_HISTORY_SEQ.NEXTVAL, #{emp_no}, 
			#{pos_no, jdbcType=VARCHAR}, #{pos_startdate, jdbcType=DATE}, 
			#{dept_no, jdbcType=VARCHAR}, #{dept_startdate, jdbcType=DATE} )
	</insert>
	
	<!-- 사원 부서 리스트 -->
	<select id="deptHistoryList" parameterType="map" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT eh.dept_no, TO_CHAR(eh.dept_startdate, 'YYYY-MM-DD') dept_startdate, 
			TO_CHAR(eh.dept_enddate, 'YYYY-MM-DD') dept_enddate, d.dept_name
		FROM emp_history eh
		JOIN dept d ON eh.dept_no = d.dept_no
		WHERE eh.emp_no = #{emp_no}
	</select>
	
	<!-- 사원 직위 리스트 -->
	<select id="posHistoryList" parameterType="map" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT eh.pos_no, TO_CHAR(eh.pos_startdate, 'YYYY-MM-DD') pos_startdate, 
			TO_CHAR(eh.pos_enddate, 'YYYY-MM-DD') pos_enddate, p.pos_name
		FROM emp_history eh
		JOIN pos p ON eh.pos_no = p.pos_no
		WHERE eh.emp_no = #{emp_no}
	</select>
	
	<!-- 
	<insert id="insertPosDept" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_history (history_no, emp_no, pos_no, pos_startdate, dept_no, dept_startdate)
		VALUES (#{history_no}, #{emp_no}, 
			(SELECT pos_no FROM emp_history WHERE emp_no = #{emp_no} ORDER BY pos_startdate DESC FETCH FIRST 1 ROW ONLY),
			(SELECT pos_startdate FROM emp_history WHERE emp_no = #{emp_no} ORDER BY pos_startdate DESC FETCH FIRST 1 ROW ONLY),
			(SELECT dept_no FROM emp_history WHERE emp_no = #{emp_no} ORDER BY dept_startdate DESC FETCH FIRST 1 ROW ONLY),
			(SELECT dept_startdate FROM emp_history WHERE emp_no = #{emp_no} ORDER BY dept_startdate DESC FETCH FIRST 1 ROW ONLY))
	</insert>
	-->
	
	
	<!-- 직위만 바뀔때 -->
	<!-- 
	<update id="updatePosHistory" parameterType="map">
		UPDATE emp_history SET pos_enddate = #{pos_enddate} 
		WHERE emp_no = #{emp_no} AND pos_no = #{pos_no} AND dept_no = #{dept_no} 
	</update>
	
	
	<insert id="insertNewPosHistory" parameterType="com.sp.grooveware.insamanage.InsaManage">
		INSERT INTO emp_history (emp_no, pos_no, pos_startdate, dept_no, dept_startdate)
		VALUES (#{emp_no}, #{pos_no}, #{pos_startdate}, #{dept_no}, #{dept_startdate})
	</insert>
	 -->
	
	<!-- 근태관리 리스트 -->
	<select id="listWork" parameterType="map" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT t.emp_no, t.emp_name, t.dept_name, t.pos_name,
               t.work_year, t.work_month,
               COUNT(DECODE(wr.work_status, 0, 1)) AS work_Count,
               COUNT(DECODE(wr.work_status, 1, 1)) AS workLate_Count,
               COUNT(DECODE(wr.work_status, 2, 1)) AS workAbsence_Count,
               COUNT(DECODE(wr.work_status, 3, 1)) AS workLateEarly_Count
        FROM (
            SELECT e.emp_no, e.emp_name, d.dept_name, p.pos_name,
                   EXTRACT(YEAR FROM wr.work_starttime) AS work_year,
                   EXTRACT(MONTH FROM wr.work_starttime) AS work_month,
                   ROW_NUMBER() OVER (PARTITION BY e.emp_no ORDER BY eh.pos_startdate DESC, eh.dept_startdate DESC) AS rank
            FROM emp e
            JOIN emp_history eh ON e.emp_no = eh.emp_no
            JOIN dept d ON eh.dept_no = d.dept_no
            JOIN pos p ON eh.pos_no = p.pos_no
            JOIN worktime_recode wr ON e.emp_no = wr.emp_no
            WHERE TO_CHAR(wr.work_starttime, 'YYYY') = #{work_starttime}
        ) t
        JOIN worktime_recode wr ON t.emp_no = wr.emp_no
        <where>
        	AND t.rank = 1 
        	AND TO_CHAR(wr.work_starttime, 'YYYY') = #{work_starttime}
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			<if test="work_starttime != null">
				AND TO_CHAR(work_starttime, 'YYYY') = #{work_starttime}
			</if>
		</where>
		GROUP BY t.emp_no, t.emp_name, t.dept_name, t.pos_name, t.work_year, t.work_month
        ORDER BY t.work_year DESC, t.work_month DESC, t.emp_no
        OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
	<!-- 근태관리 dataCount -->
	<select id="workDataCount" parameterType="map" resultType="Integer">
		SELECT COUNT(DISTINCT emp_no)
		FROM worktime_recode
		WHERE emp_no = #{emp_no}
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<!--  출퇴근 리스트  -->
	<select id="dataCount2" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		FROM worktime_recode
	</select>
	
	<select id="listWorkRecord" parameterType="map" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT record_no, emp_no, 
			TO_CHAR(work_starttime, 'MM/DD') work_day, 
			TO_CHAR(work_starttime, 'HH24:MI') work_starttime, 
			TO_CHAR(work_endtime, 'HH24:MI') work_endtime, work_status 
		FROM worktime_recode
		<where>
			AND emp_no = #{emp_no}
			<if test="work_starttime != null">
				AND TO_CHAR(work_starttime, 'YYYYMM') = #{work_starttime}
			</if>			
		</where>
		ORDER BY work_day
	</select>
	
	<!-- 사원 개인 출근일, 지각일, 결근일 계산 -->
	<select id="workCount" parameterType="Long" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT EXTRACT(YEAR FROM wr.work_starttime) AS work_year, e.emp_name,
	        COUNT(CASE WHEN wr.work_status = 0 THEN 1 END) AS work_Count,
	        COUNT(CASE WHEN wr.work_status = 1 THEN 1 END) AS workLate_Count,
	        COUNT(CASE WHEN wr.work_status = 2 THEN 1 END) AS workAbsence_Count,
	       	COUNT(CASE WHEN wr.work_status = 3 THEN 1 END) AS workLateEarly_Count,
	       	COUNT(CASE WHEN wr.work_status = 4 THEN 1 END) AS workHoliday_Count
	    FROM worktime_recode wr
	    JOIN emp e ON e.emp_no = wr.emp_no
	    WHERE wr.emp_no = #{emp_no}
	    GROUP BY EXTRACT(YEAR FROM wr.work_starttime), e.emp_name
	</select>
	
	
	
	<update id="hoildayUpdate" parameterType="com.sp.grooveware.insamanage.InsaManage">
		MERGE INTO emp_annual ea
        USING (
          SELECT emp_no, emp_join_date FROM emp
        ) e ON (ea.emp_no = e.emp_no)
        WHEN MATCHED THEN
        UPDATE SET ea.annual_count = 
            CASE 
              WHEN months_between(SYSDATE, e.emp_join_date) / 12 &lt; 1 THEN 12
              WHEN months_between(SYSDATE, e.emp_join_date) / 12 &gt;= 1 AND months_between(SYSDATE, e.emp_join_date) / 12 &lt;= 5 THEN 16
              WHEN months_between(SYSDATE, e.emp_join_date) / 12 &gt; 5 AND months_between(SYSDATE, e.emp_join_date) / 12 &lt;= 10 THEN 20
              WHEN months_between(SYSDATE, e.emp_join_date) / 12 &gt; 10 AND months_between(SYSDATE, e.emp_join_date) / 12 &lt;= 15 THEN 26
              ELSE 32
            END
	</update>
	
	
	<select id="holidayDataCount" parameterType="map" resultType="Integer">
		SELECT COUNT(DISTINCT emp_no)
		FROM emp_annual
		WHERE emp_no = #{emp_no}
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
		</where>
	</select>
	
	
	<!-- 휴가 관리 리스트 -->
	<select id="listholidayMember" parameterType="map" resultType="com.sp.grooveware.insamanage.InsaManage">
		SELECT emp_no, emp_name, dept_name, pos_name, 
                TO_CHAR(emp_join_date, 'YYYY-MM-DD') emp_join_date, 
                TO_CHAR(emp_resign_date, 'YYYY-MM-DD') emp_resign_date, emp_status, 
				annual_count, annual_use, <!-- (annual_count - annual_use) annual_remain, -->
				EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM emp_join_date) + 1 annual_leave
			FROM (
			  SELECT e.emp_no, e.emp_name, d.dept_name, p.pos_name, 
			         e.emp_join_date,
			         e.emp_resign_date, e.emp_status,
                     ea.annual_count, ea.annual_use,
			         ROW_NUMBER() OVER (PARTITION BY e.emp_no ORDER BY eh.pos_startdate DESC, eh.dept_startdate DESC) AS rank
			  FROM emp e
			  JOIN emp_history eh ON e.emp_no = eh.emp_no
			  JOIN dept d ON eh.dept_no = d.dept_no
			  JOIN pos p ON eh.pos_no = p.pos_no
              JOIN emp_annual ea ON e.emp_no = ea.emp_no
			) t 
		<where>
			AND rank = 1 AND emp_status = 0
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
		</where>
		ORDER BY emp_status, emp_join_date
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	
</mapper>